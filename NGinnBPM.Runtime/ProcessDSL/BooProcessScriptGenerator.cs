using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NGinnBPM.ProcessModel;
using NGinnBPM.ProcessModel.Data;
using System.IO;
using Newtonsoft.Json;

namespace NGinnBPM.Runtime.ProcessDSL
{
    /// <summary>
    /// Experiment in generating boo process definition script (DSL) from a process definition
    /// object.
    /// </summary>
    public class BooProcessScriptGenerator
    {
        private TextWriter _out = null;

        public BooProcessScriptGenerator(TextWriter tw)
        {
            _out = tw;
        }


        public static void GenerateScript(ProcessDef pd, TextWriter output)
        {
            new BooProcessScriptGenerator(output).GenerateScript(pd);
            output.Flush();
        }

        public static void GenerateScript(ProcessDef pd, string outputDirectory)
        {
            string fn = Path.Combine(outputDirectory, string.Format("{0}.{1}.boo", pd.ProcessName, pd.Version));
            using (var sw = new StreamWriter(fn, false, Encoding.UTF8))
            {
                GenerateScript(pd, sw);
            }
        }

        public void GenerateScript(ProcessDef pd)
        {
            WriteLine("#########");
            WriteLine("# this script is generated by an automatic tool. Do not modify it because your changes might be overwritten");
            WriteLine("#########");
            WriteCompositeTask(pd.Body);
        }

        private string _curIndent = "";

        private void Indent(Action act)
        {
            var ci = _curIndent;
            _curIndent = _curIndent + "    ";
            act();
            _curIndent = ci;
        }

        protected void WriteVariable(VariableDef vd)
        {
            WriteLine(string.Format("variable \"{0}\", \"{1}\":", vd.Name, vd.TypeName));
            Indent(() =>
            {
                if (!string.IsNullOrEmpty(vd.DefaultValueExpr)) WriteLine("default_value {0}", vd.DefaultValueExpr);
                WriteLine("options {0}", BooHash(new Dictionary<string, object> {
                    {"array", vd.IsArray},
                    {"required", vd.IsRequired},
                    {"dir", "VariableDef.Dir." + vd.VariableDir.ToString()}
                }));
            });
        }

        protected void WriteCompositeTask(CompositeTaskDef t)
        {
            WriteLine("composite_task \"{0}\":", t.Id);
            Indent(() =>
            {
                if (t.ExtensionProperties != null)
                {
                    WriteMeta(t.ExtensionProperties);
                }
                foreach (var vd in t.Variables)
                {
                    WriteVariable(vd);
                }
                foreach (var pl in t.Places)
                {
                }
                foreach (var tsk in t.Tasks)
                {
                    if (tsk is CompositeTaskDef)
                    {
                        WriteCompositeTask((CompositeTaskDef)tsk);
                    }
                    else
                    {
                        WriteAtomicTask((AtomicTaskDef)tsk);
                    }
                }
                foreach (var fl in t.Flows)
                {
                }
            });
        }

        protected void WriteAtomicTask(AtomicTaskDef t)
        {
        }

        protected string BooHash(IDictionary<string, object> data)
        {
            //JsonTextWriter jtw;

            return JsonConvert.SerializeObject(data);
        }

        protected string Json(object v)
        {
            return JsonConvert.SerializeObject(v);
        }

        protected void WriteMeta(Dictionary<string, Dictionary<string, object>> meta)
        {
            WriteLine("metadata {0}", Json(meta));
        }

        protected void WriteLine(string ln, params object[] args)
        {
            _out.Write(_curIndent);
            _out.WriteLine(string.Format(ln, args));
        }

    }
}
